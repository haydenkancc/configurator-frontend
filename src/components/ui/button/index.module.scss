@use '@/app/variables';


.danger {
  background-color: variables.$palette-danger-solidBg;
  color: variables.$palette-primary-solidColor;

  &[data-hovered] {
    background-color: variables.$palette-danger-solidActiveBg;
  }

  &[data-disabled] {
    background-color: variables.$palette-danger-solidDisabledBg;
    color: variables.$palette-danger-solidDisabledColor
  }

}

.primary {
  color: variables.$palette-primary-solidColor;
  background-color: variables.$palette-primary-solidBg;

  &[data-hovered] {
    background-color: variables.$palette-primary-solidHoverBg;
  }

  &[data-disabled] {
    background-color: variables.$palette-primary-solidDisabledBg;
    color: variables.$palette-primary-solidDisabledColor;
  }
}

.neutral {
  border: 1px solid variables.$palette-neutral-outlinedBorder;
  color: variables.$palette-neutral-outlinedColor;

  & > svg {
    fill: variables.$palette-text-icon
  }

  &[data-hovered] {
    background-color: variables.$palette-neutral-outlinedHoverBg;
  }

  &[data-disabled] {
    color: variables.$palette-neutral-outlinedDisabledColor;
    border-color: variables.$palette-neutral-outlinedDisabledBorder;

    & > svg {
      fill: variables.$palette-danger-outlinedDisabledColor;
    }
  }
}

.warning {
  color: variables.$palette-primary-solidColor;
  background-color: variables.$palette-warning-solidBg;

  &[data-hovered] {
    background-color: variables.$palette-warning-solidActiveBg;
  }

  &[data-disabled] {
    background-color: variables.$palette-warning-solidDisabledBg;
    color: variables.$palette-warning-solidDisabledColor
  }
}

.success {
  color: variables.$palette-primary-solidColor;
  background-color: variables.$palette-success-solidBg;

  &[data-hovered] {
    background-color: variables.$palette-success-solidActiveBg;
  }

  &[data-disabled] {
    background-color: variables.$palette-success-solidDisabledBg;
    color: variables.$palette-success-solidDisabledColor
  }
}

.plain {
  color: variables.$palette-neutral-plainColor;

  &[data-hovered] {
    color: variables.$palette-neutral-plainHoverColor;
    background-color: variables.$palette-neutral-plainHoverBg;
  }

  &[data-disabled] {
    color: variables.$palette-neutral-plainDisabledColor;
  }
}


.button {
  @include variables.focus;
  position: relative;
  display: flex;
  align-items: center;
  text-wrap: nowrap;
  gap: 0.375rem;
  min-height: 2rem;
  padding: 0.25rem 0.75rem;
  border-radius: 0.25rem;
  @include variables.text-md;
  font-weight: 500;
  cursor: pointer;

  &[data-disabled] {
    cursor: not-allowed;
  }

  &[data-loading=true] {
    color: transparent;
  }
}

.loaderWrapper {
  position: absolute;
  inset: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0.25rem;
}

.loader {
  width: 1.25rem;
  height: 1.25rem;
  border-radius: 50%;
  position: relative;
  animation: rotate 1.25s linear infinite
}

.loader::before {
  content: "";
  box-sizing: border-box;
  position: absolute;
  inset: 0;
  border-radius: 50%;
  border: 3px solid variables.$palette-primary-solidBg;
  animation: prixClipFix 3s linear infinite ;
}

@keyframes rotate {
  100%   {transform: rotate(360deg)}
}

@keyframes prixClipFix {
  0%   {clip-path:polygon(50% 50%,0 0,0 0,0 0,0 0,0 0)}
  25%  {clip-path:polygon(50% 50%,0 0,100% 0,100% 0,100% 0,100% 0)}
  50%  {clip-path:polygon(50% 50%,0 0,100% 0,100% 100%,100% 100%,100% 100%)}
  75%  {clip-path:polygon(50% 50%,0 0,100% 0,100% 100%,0 100%,0 100%)}
  100% {clip-path:polygon(50% 50%,0 0,100% 0,100% 100%,0 100%,0 0)}
}